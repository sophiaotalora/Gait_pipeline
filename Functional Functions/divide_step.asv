function data = divide_step(Fs, data, Subjects, MetaData, Settings, PlotSettings)
    %subjectNames = fieldnames(Subjects);    
    for iSubject = 11%length(subjectNames)              
        for iState = 2%1:length(MetaData.states)
            try
                StraightWalks = data.("s"+iSubject).(MetaData.states{iState}).SU.WB.straightWalk;
                TimeStamp = data.("s"+iSubject).(MetaData.states{iState}).SU.LowerBack.Timestamp;
                SizeSW = size(StraightWalks, 1);
                % Retrieve straight walk intervals
                %add column of WBid
                for iSteps_per_SW = 15%1: SizeSW-1
                    straightWalk_start = cell2mat({data.("s"+iSubject).(MetaData.states{iState}).SU.WB.straightWalk(iSteps_per_SW).start});                             % start of straight WB
                    straightWalk_end = cell2mat({data.("s"+iSubject).(MetaData.states{iState}).SU.WB.straightWalk(iSteps_per_SW).end});                                 %end of straight WB
                    if straightWalk_end < straightWalk_start
                        continue;
                    end
                    AccVT = data.("s"+iSubject).(MetaData.states{iState}).SU.LowerBack.imu.acc_V(straightWalk_start:straightWalk_end);
                    TemporalFeatures = calculate_TemporalGaitFeatures_McCamley_BAM(Settings,AccVT,Fs,PlotSettings);
                    IC = TemporalFeatures.InitialContactSample;
                    StepDuration = TemporalFeatures.StepDuration;
                    StepsNumber = min(length(IC), length(StepDuration));
                    Steps = struct('start', {}, 'end', {});
                    for iSteps = 1:StepsNumber
                        Steps(iSteps).start = straightWalk_start + IC(iSteps);
                        Steps(iSteps).end = Steps(iSteps).start +StepDuration(iSteps)*Fs;
                    end     
                    % Assign steps to straight walk intervals
                    data.("s"+iSubject).(MetaData.states{iState}).SU.WB.straightWalk(iSteps_per_SW).StepsData = Steps;
                end
                %First and last steps
                for iFirst_Last = 1:SizeSW-1
                    Steps_cont = length(data.("s"+iSubject).(MetaData.states{iState}).SU.WB.straightWalk(iFirst_Last).StepsData);
                    data.("s"+iSubject).(MetaData.states{iState}).SU.WB.straightWalk(iFirst_Last).FirstSteps = data.("s"+iSubject).(MetaData.states{iState}).SU.WB.straightWalk(iFirst_Last).StepsData(1:3);
                    data.("s"+iSubject).(MetaData.states{iState}).SU.WB.straightWalk(iFirst_Last).LastSteps = data.("s"+iSubject).(MetaData.states{iState}).SU.WB.straightWalk(iFirst_Last).StepsData(end-2:end); 
                    data.("s"+iSubject).(MetaData.states{iState}).SU.WB.straightWalk(iFirst_Last).MiddleSteps = data.("s"+iSubject).(MetaData.states{iState}).SU.WB.straightWalk(iFirst_Last).StepsData(round(Steps_cont/2)-1:round(Steps_cont/2)+1);
                end
                %Make new matrix for first, middle and last joining all structures
                data.("s"+iSubject).(MetaData.states{iState}).SU.WB.FirstSteps = []; 
                data.("s"+iSubject).(MetaData.states{iState}).SU.WB.LastSteps = []; 
                data.("s"+iSubject).(MetaData.states{iState}).SU.WB.MiddleSteps = []; 
                Matrix_steps= ["FirstSteps", "LastSteps", "MiddleSteps"];
                for iLevel= 1:length(Matrix_steps)
                    for iSW = 1:SizeSW-1 
                        for jSW = 1:length(data.("s"+iSubject).(MetaData.states{iState}).SU.WB.straightWalk(iSW).(Matrix_steps(iLevel)))
                            startValue = data.("s"+iSubject).(MetaData.states{iState}).SU.WB.straightWalk(iSW).(Matrix_steps(iLevel))(jSW).start;
                            endValue = data.("s"+iSubject).(MetaData.states{iState}).SU.WB.straightWalk(iSW).(Matrix_steps(iLevel))(jSW).end;
                            WBid = iSW;
                            newEntry = struct('start', startValue, 'end', endValue, 'iWB', WBid);
                            if ~isfield(data.("s"+iSubject).(MetaData.states{iState}).SU.WB, Matrix_steps(iLevel)) || isempty(data.("s"+iSubject).(MetaData.states{iState}).SU.WB.(Matrix_steps(iLevel)))
                                %If it is empty
                                data.("s"+iSubject).(MetaData.states{iState}).SU.WB.(Matrix_steps(iLevel)) = newEntry;
                            else
                                %Append
                                data.("s"+iSubject).(MetaData.states{iState}).SU.WB.(Matrix_steps(iLevel)) = [data.("s"+iSubject).(MetaData.states{iState}).SU.WB.(Matrix_steps(iLevel)), newEntry];
                            end
                            %Concatenate 
                            %data.("s"+iSubject).(MetaData.states{iState}).SU.WB.(Matrix_steps(iLevel)) = [data.("s"+iSubject).(MetaData.states{iState}).SU.WB.(Matrix_steps(iLevel)); startValue, endValue, WBid];
                        end % jSW
                    end %iSW
                end %iLevel
            catch ME
                fprintf('Error en la lÃ­nea %d: %s\n', ME.stack(1).line, ME.message);
                disp(iState)
                disp("isteps per sw")
                disp(iSteps_per_SW)
                disp("SIZE SW")
                disp(SizeSW)
                disp("isteps")
                disp(iSteps)
                disp("stepsnumber")
                disp(StepsNumber)
            end

        end %iState
    end %iSubject
